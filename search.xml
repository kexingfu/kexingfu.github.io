<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTTPS如何保证安全性</title>
    <url>/2019/12/10/HTTPS%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%E6%80%A7/</url>
    <content><![CDATA[<h2 id="HTTPS原理"><a href="#HTTPS原理" class="headerlink" title="HTTPS原理"></a>HTTPS原理</h2><p>HTTPS的整体过程分为证书验证和数据传输阶段，仅在证书验证阶段使用非对称加密，数据传输阶段使用对称加密</p>
<h3 id="证书验证阶段"><a href="#证书验证阶段" class="headerlink" title="证书验证阶段"></a>证书验证阶段</h3><p>1.浏览器发起 HTTPS 请求<br>2.服务端返回 HTTPS 证书（内含公钥）<br>3.客户端验证证书是否合法，如果不合法则提示告警</p>
<h3 id="数据传输阶段"><a href="#数据传输阶段" class="headerlink" title="数据传输阶段"></a>数据传输阶段</h3><p>1.当证书验证合法后，在本地生成随机数<br>2.通过公钥加密随机数，并把加密后的随机数传输到服务端<br>3.服务端通过私钥对随机数进行解密<br>4.服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输</p>
<h3 id="为何仅在证书验证阶段使用非对称加密，数据传输阶段使用对称加密？"><a href="#为何仅在证书验证阶段使用非对称加密，数据传输阶段使用对称加密？" class="headerlink" title="为何仅在证书验证阶段使用非对称加密，数据传输阶段使用对称加密？"></a>为何仅在证书验证阶段使用非对称加密，数据传输阶段使用对称加密？</h3><p>1.非对称加密的加解密效率非常低，而 http 的应用场景中通常端与端之间存在大量的交互<br>2.一对公私钥只能实现单向的加解密，而在 HTTPS 的场景中只有服务端保存了私钥<br><img src="/images/https%E5%8E%9F%E7%90%86.jpg" alt="图片1" title="https原理"></p>
<h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>过程原理：<br>1.本地请求被劫持（如DNS劫持等），所有请求均发送到中间人的服务器<br>2.中间人服务器返回中间人自己的证书<br>3.客户端创建随机数，通过中间人证书的公钥对随机数加密后传送给中间人，然后凭随机数构造对称加密对传输内容进行加密传输<br>4.中间人因为拥有客户端的随机数，可以通过对称加密算法进行内容解密<br>5.中间人以客户端的请求内容再向正规网站发起请求<br>6.因为中间人与服务器的通信过程是合法的，正规网站通过建立的安全通道返回加密后的数据<br>7.中间人凭借与正规网站建立的对称加密算法对内容进行解密<br>8.中间人通过与客户端建立的对称加密算法对正规内容返回的数据进行加密传输<br>9.客户端通过与中间人建立的对称加密算法对返回结果数据进行解密</p>
<p>由于缺少对证书的验证，所以客户端虽然发起的是 HTTPS 请求，但客户端完全不知道自己的网络已被拦截，传输内容被中间人全部窃取。<br><img src="/images/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB.jpg" alt="图片1" title="https原理"></p>
<h2 id="浏览器是如何确保-CA-证书的合法性？"><a href="#浏览器是如何确保-CA-证书的合法性？" class="headerlink" title="浏览器是如何确保 CA 证书的合法性？"></a>浏览器是如何确保 CA 证书的合法性？</h2><h3 id="证书包含什么信息？"><a href="#证书包含什么信息？" class="headerlink" title="证书包含什么信息？"></a>证书包含什么信息？</h3><p>颁发机构信息<br>公钥<br>公司信息<br>域名<br>有效期<br>指纹<br>……</p>
<h3 id="证书的合法性依据是什么？"><a href="#证书的合法性依据是什么？" class="headerlink" title="证书的合法性依据是什么？"></a>证书的合法性依据是什么？</h3><p>首先，权威机构是要有认证的，不是随便一个机构都有资格颁发证书，不然也不叫做权威机构。另外，证书的可信性基于信任制，权威机构需要对其颁发的证书进行信用背书，只要是权威机构生成的证书，我们就认为是合法的。所以权威机构会对申请者的信息进行审核，不同等级的权威机构对审核的要求也不一样，于是证书也分为免费的、便宜的和贵的。</p>
<h3 id="浏览器如何验证证书的合法性？"><a href="#浏览器如何验证证书的合法性？" class="headerlink" title="浏览器如何验证证书的合法性？"></a>浏览器如何验证证书的合法性？</h3><p>浏览器发起 HTTPS 请求时，服务器会返回网站的 SSL 证书，浏览器需要对证书做以下验证：<br>1.验证域名、有效期等信息是否正确。证书上都有包含这些信息，比较容易完成验证；<br>2.判断证书来源是否合法。每份签发证书都可以根据验证链查找到对应的根证书，操作系统、浏览器会在本地存储权威机构的根证书，利用本地根证书可以对对应机构签发证书完成来源验证；<br>3.判断证书是否被篡改。需要与 CA 服务器进行校验；<br>4.判断证书是否已吊销。通过CRL（Certificate Revocation List 证书注销列表）和 OCSP（Online Certificate Status Protocol 在线证书状态协议）实现，其中 OCSP 可用于第3步中以减少与 CA 服务器的交互，提高验证效率<br>*以上任意一步都满足的情况下浏览器才认为证书是合法的。</p>
<h3 id="只有认证机构可以生成证书吗？"><a href="#只有认证机构可以生成证书吗？" class="headerlink" title="只有认证机构可以生成证书吗？"></a>只有认证机构可以生成证书吗？</h3><p>浏览器通常只是提示安全风险，并不限制网站不能访问，所以从技术上谁都可以生成证书，只要有证书就可以完成网站的 HTTPS 传输。</p>
<h3 id="HTTPS-抓包"><a href="#HTTPS-抓包" class="headerlink" title="HTTPS 抓包"></a>HTTPS 抓包</h3><p>HTTPS 的数据是加密的，常规下抓包工具代理请求后抓到的包内容是加密状态，无法直接查看。<br>但是，正如前文所说，浏览器只会提示安全风险，如果用户授权仍然可以继续访问网站，完成请求。此，只要客户端是我们自己的终端，我们授权的情况下，便可以组建中间人网络，而抓包工具便是作为中间人的代理。<br>通常 HTTPS 抓包工具的使用方法是会生成一个证书，用户需要手动把证书安装到客户端中，然后终端发起的所有请求通过该证书完成与抓包工具的交互，然后抓包工具再转发请求到服务器，最后把服务器返回的结果在控制台输出后再返回给终端，从而完成整个请求的闭环。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
</search>
